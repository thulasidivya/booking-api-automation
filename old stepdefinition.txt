package com.qe.vt.atz.atz.stepdeff;

import com.qe.vt.atz.atz.constants.LocatorTypes;
import com.qe.vt.atz.atz.framework.element.WebElementImpl;
import com.qe.vt.atz.atz.constants.Config;
import com.qe.vt.atz.atz.constants.Locators;
import io.cucumber.java.en.*;
import org.junit.Assert;

public class myStepdef extends WebElementImpl {

    @Given("User launch the {string} browser")
    public void userLaunchTheBrowser(String arg0) {
        driverBuilder(Config.BROWSER_TYPE);
    }

    @Then("User launched the chrome browser successfully")
    public void userLaunchedTheChromeBrowserSuccessfully() {
        driverBuilder(Config.BROWSER_TYPE);


    }

    @Then("User will able to close the browser")
    public void userWillAbleToCloseTheBrowser() {

    }

    @Then("User launched the firefox browser successfully")
    public void userLaunchedTheFirefoxBrowserSuccessfully() {
        driverBuilder(Config.BROWSER_TYPE);

    }

    @Then("User will be able to close the browser")
    public void userWillBeAbleToCloseTheBrowser() {

    }

    @Then("User launched the edge browser successfully")
    public void userLaunchedTheEdgeBrowserSuccessfully() {

        driverBuilder(Config.BROWSER_TYPE);
        driver.get(Config.BASE_URL);

    }

    @And("User unable to lanch the browser")
    public void userUnableToLanchTheBrowser() {

    }

    @But("User lanched opera browser")
    public void userLanchedOperaBrowser() {


    }

    @Then("User trying to launch the firefox browser successfully")
    public void userTryingToLaunchTheFirefoxBrowserSuccessfully() {
        driverBuilder(Config.BROWSER_TYPE);
        driver.get(Config.BASE_URL);

    }

    @And("User unable to close the browser")
    public void userUnableToCloseTheBrowser() {

    }

    @But("User lanched test browser")
    public void userLanchedTestBrowser() {
    }


    @Then("User successfully Login into the Home page")
    public void user_successfully_login_into_the_home_page() {

    }

    @Then("User trying to launch the edge browser successfully")
    public void userTryingToLaunchTheEdgeBrowserSuccessfully() {
    }


    @And("User enters the password {string} in the text field")
    public void userEntersThePasswordInTheTextField(String arg0) {
        getElementwait(Locators.HOMEPAGE_PASSWORD_PASSWORD, LocatorTypes.XPATH).sendKeys("admin123");
        // Assert.assertSame("admin123","admin123");
    }

    @When("User enters the username {string} in the text field")
    public void userEntersTheUsernameInTheTextField(String arg0) {
        getElementwait(Locators.HOMEPAGE_USERNAME_NAME, LocatorTypes.XPATH).sendKeys("Admin");
        //Assert.assertSame("Admin","Admin");

    }

    @And("User clicks the Login button")
    public void userClicksTheLoginButton() {
        getElementwait(Locators.HOMEPAGE_LOGIN_BUTTON_XPATH, LocatorTypes.XPATH).click();

    }

     @Given("User is on the Home page")
    public void userIsOnTheHomePage() {
        driverBuilder(Config.BROWSER_TYPE);
        driver.get(Config.BASE_URL);
    }

    @Then("User able reach login page")
    public void userAbleReachLoginPage() {
        getElementwait(Locators.HOME_LOGIN_PAGETITLE, LocatorTypes.XPATH).isDisplayed();

    }


    @Then("User enters the invalid username {string} in the text field")
    public void userEntersTheInvalidUsernameInTheTextField(String arg0) {
        getElementwait(Locators.HOMEPAGE_USERNAME_NAME, LocatorTypes.XPATH).sendKeys("Admin4");
        Assert.assertNotSame("Admin4", "Admin");

    }

    @And("User enters the invalid password {string} in the text field")
    public void userEntersTheInvalidPasswordInTheTextField(String arg0) {
        getElementwait(Locators.HOMEPAGE_PASSWORD_PASSWORD, LocatorTypes.XPATH).sendKeys("admin1235");
        Assert.assertNotSame("admin1235", "admin123");
    }

    @Then("User getting invald message {string} in Home page")
    public void userGettingInvaldMessageInHomePage(String arg0) {
        getElementwait(Locators.HOME_LOGIN_ERRORMESSAGE, LocatorTypes.XPATH).isDisplayed();

    }

    @Given("User is on Login page")
    public void userIsOnLoginPage() {
        getElementwait(Locators.HOME_LOGIN_PAGETITLE, LocatorTypes.XPATH).isDisplayed();

    }

    @Then("User gets the title of the page")
    public void userGetsTheTitleOfThePage() {
        getElementwait(Locators.HOME_LOGIN_LOGINTITLE, LocatorTypes.XPATH).isDisplayed();

    }

    @And("page title should be {string}")
    public void pageTitleShouldBe(String arg0) {
        Assert.assertEquals("OrangeHRM", driver.getTitle());


    }


    @Given("User Logged into Orange HRM.")
    public void userLoggedIntoOrangeHRM() {
    }


    @When("User gets the text of dashboard page")
    public void userGetsTheTextOfDashboardPage() {
        getElementwait(Locators.HOME_LOGIN_DASHBOARD, LocatorTypes.XPATH).isDisplayed();
    }

    @Then("Dash board Page text should be {string}")
    public void dashBoardPageTextShouldBe(String arg0) {
        getElementwait(Locators.HOME_LOGIN_DASHBOARD, LocatorTypes.XPATH).isDisplayed();
        Assert.assertEquals("Admin",driver.getTitle());
    }
}




import org.openqa.selenium.interactions.Actions;

<span class="oxd-text oxd-text--span oxd-main-menu-item--name" data-v-7b563373="" data-v-6475d26d="">Admin</span>